Capstone Project Proposal: Enterprise Resource Management System (ERMS)

Team Members:
- Daniel Medina Lopez (991658620)
- Dylan Gonzales 
- Amir Barakat (991592931)

GitHub Repository:
https://github.com/MedinaPiRRy/ERMS-ASP.NET
(Note: Commit messages are meaningful and descriptive)

Project Overview:
The Enterprise Resource Management System (ERMS) is a full-stack web platform designed to streamline the management of 
employees, projects, and task assignments in a professional organization. It features secure user authentication and 
role-based access (Admin, Manager, Employee), integrated APIs, centralized logging, and Azure deployment.

Technologies Used:
- ASP.NET Core MVC for front-end and controller logic (Scaffolded controllers at first, then they were edited)
- ASP.NET Core Web API for decoupled data access (REST APIs are located in Controllers/APIs and are also deployed to Azure)
- SQL Server with Entity Framework Core for database interactions (Employees, Projects, and TaskItem tables)
- Azure SQL Database for cloud-hosted DB (Migrated LocalDB from my personal computer to Azure SQL using SSMS)
- NLog for logging 
- Coverlet + xUnit for automated testing and code coverage reporting (Tests are passing with a 10% Line Coverage & 24% Branch Coverage)
- Git + GitHub for source control and versioning (GitHub was used to host the code for our app. Commit messages are meaningful and descriptive)
- SSMS and Azure Data Studio for DB management and deployment (SSMS was used for LocalDB and Azure for the PROD Database)

Development Environment:
- IDE: Visual Studio 2022
- Framework: .NET 8.0
- Database: SQL Server (local and Azure for hosted database)
- Hosting: Azure App Service + Azure SQL Database
- Tools: GitHub, SSMS, Azure Portal, Postman, .NET CLI, .NET Hosting Bundle (Used at first since we though the app was going to
be hosted on IIS, however, after being able to create a student account on Azure, we decided to host it there)

Key Features:
✔️ Role-based Authentication with ASP.NET Identity (Admin, Manager, Employee)
✔️ CRUD Operations for Employees, Projects, and TaskItems (Based on Roles)
✔️ Task linking with status and priority, and relational data integrity (FKs)
✔️ RESTful APIs consumed via `HttpClient` from MVC services layer (Found on Services/ folder)
✔️ Controllers secured via runtime role checks (Ex: `User.IsInRole`) [We decided to use this Approach as the tag [Authorize] was not working]
✔️ Full API and MVC controller testing with Moq + Coverlet (59 tests in total)
✔️ Seeded roles and default passwords for fast setup (This is declared in Progam.cs)
✔️ Deployment to Azure (App Service + SQL DB)
✔️ Logs captured and written using NLog (Log files are located in the Logs folder)
✔️ Project tracked on GitHub with meaningful commits

Project Status:
✅ MVC Controllers & Views implemented and tested
✅ APIs created for Employees, Projects, TaskItems
✅ Connected services for consuming APIs from MVC
✅ Unit Tests written for all Controllers (50+)
✅ Coverage: 10% Line | 24% Branch via Coverlet
✅ Database migrated and deployed to Azure
✅ Live app functional with cloud-hosted DB
✅ Logs generated via NLog on all actions
✅ Stored Procedures and SSRS reports (These diagrams and procedures can be found under ERMS/Reports)

Project Checklist:
[✓] DB Schema in ERMS/Reports/Schema
[✓] Used Visual Studio, .NET Core, Git, SQL Server
[✓] Source Control: GitHub
[✓] Role-Based Access using ASP.NET Identity
[✓] CRUD for Employees, Projects, TaskItems
[✓] APIs in Controllers/Api folder (GET, POST, PUT, DELETE)
[✓] Secured access by role in MVC Controllers (instead of [Authorize] tags)
[✓] HttpClient for API consumption via ERMS/Services
[✓] 59 Unit Tests written using xUnit & Moq
[✓] Test Coverage: 10% Line | 24% Branch
[✓] 3 DB Tables with relationships defined under ERMS/Models
[✓] Stored Procedures & Custom Reports in ERMS/Reports
[✓] Role-based access restrictions enforced at controller level
[✓] Full deployment to Azure (Web App + SQL DB)
[✓] NLog logging across all major actions

Test Coverage Breakdown:
Total Tests: 59
Coverage: 10% Line | 24% Branch
- MVC Controllers: Employees, Projects, TaskItems
- API Controllers: EmployeesApi, ProjectsApi, TaskItemsApi

Admin User:
Please use the following credentials to log in as a Manager, admin or employee user, who can perform CRUD operations to database:
MANAGER:
- Username: manager@test.com
- Password: Password123$
ADMIN:
- Username: admin@test.com
- Password: Password123$
EMPLOYEE:
- Username:	employee@test.com
- Password: Password123$

Restrictions: (Although the instructions for the project were loose on this topic, we decided to implement this as a real app)
- Admin: Full CRUD across Employees, Projects, and TaskItems
- Manager: CRUD on Projects and TaskItems; can edit Employees under their management
- Employee: CRUD on their assigned TaskItems (except delete)
- Unassigned Users: Read-only Index access

GitHub Repo:
https://github.com/MedinaPiRRy/ERMS-ASP.NET

Azure Deployment Link:
https://ermsappcapstone.azurewebsites.net/
